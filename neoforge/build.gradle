plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

archivesBaseName = archivesBaseName + "-neoforge"

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            data()
            programArgs "--all", "--mod", "artifacts"
            programArgs "--output", project(':common').file('src/generated/resources').getAbsolutePath()
            programArgs "--existing", project(':common').file('src/main/resources').getAbsolutePath()
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    include modImplementation("be.florens:expandability-neoforge:${rootProject.expandability_version}")
    modImplementation("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}")
    modImplementation("top.theillusivec4.curios:curios-neoforge:${rootProject.curios_version}")

    // compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}"))
    // TODO implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))

    modCompileOnly("curse.maven:cosmetic-armor-reworked-237307:5082294")

    modRuntimeOnly("maven.modrinth:curious-armor-stands:${rootProject.curious_armor_stands_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
