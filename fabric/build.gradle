plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

archivesBaseName = archivesBaseName + "-fabric"

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    //include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}") {
        version {
            strictly("${rootProject.trinkets_version}")
        }
    }

    modImplementation("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") {
        transitive = false
    }

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"

    //modImplementation(include("com.github.emilyploszaj:step-height-entity-attribute:v1.2.0"))

    modApi include("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    modApi include("org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}")

    //modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}")
    //modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}")

    modImplementation include("be.florens:expandability-fabric:${rootProject.expandability_version}")

    // Compat & integration
    modCompileOnly("curse.maven:origins-391943:4609386") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:apoli:v${rootProject.apoli_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:calio:v${rootProject.calio_version}") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
